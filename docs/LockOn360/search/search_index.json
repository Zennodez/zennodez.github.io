{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lock-On 360 Lock-On 360 Introduction This is the documentation for the Lock-On 360 package, last updated for Version 1.0.1 . The following documentation is presented as a guide on how to setup the package and use it inside your project. This documentation is written for Unreal Editor version 4.21.2 and higher. Basic knowledge on how to navigate through the Unreal Editor is expected. Any questions related to this package and documentation can be delivered to our team through the following channels, Email : zennodez@gmail.com Discord : https://discord.gg/dn62e2udDx To see what have been changed in the latest version, see Version History . For a list of recommended topics, see the list of topics below. To proceed with the guide, head over to the next page . List of Topics How to setup the Lock-On system How to add one or more target points to your existing actor/character How to customize the user interface Back to Main Page","title":"Index"},{"location":"#lock-on-360","text":"Lock-On 360","title":"Lock-On 360"},{"location":"#introduction","text":"This is the documentation for the Lock-On 360 package, last updated for Version 1.0.1 . The following documentation is presented as a guide on how to setup the package and use it inside your project. This documentation is written for Unreal Editor version 4.21.2 and higher. Basic knowledge on how to navigate through the Unreal Editor is expected. Any questions related to this package and documentation can be delivered to our team through the following channels, Email : zennodez@gmail.com Discord : https://discord.gg/dn62e2udDx To see what have been changed in the latest version, see Version History . For a list of recommended topics, see the list of topics below. To proceed with the guide, head over to the next page .","title":"Introduction"},{"location":"#list-of-topics","text":"How to setup the Lock-On system How to add one or more target points to your existing actor/character How to customize the user interface Back to Main Page","title":"List of Topics"},{"location":"setup/","text":"Lock-On Setup These steps are performed on the character/actor that you wish to add the lock-on functionality to, not the target. Prepare a character/actor First of all, make sure you have a character/actor ready for the project. On the package, there is an example character included in Content/LockOn360/Demo/Blueprints/Character/LockOnCharacter . This is the character used for the LockOn360 demo, you can use this as your reference. If you're new to Unreal Engine, it's recommended that you start by creating a new project based on the editor's ThirdPerson template. The LockOnCharacter example is more or less compatible with Unreal's ThirdPersonCharacter . Lock-On component setup Next is to add a LockOnManager component towards the actor/character. You will need to do this to the character/actor that you wish to give the lock-on functionality to. Navigate to the character/actor blueprint, open the file. Inside the component tab (usually placed at the top left of the editor) , there should be an \"Add Component\" button. Press the button and add the following components: LockOnManager (required) Contains the logic for handling the 360 lock-on system. KeyPressHandler (optional) Optional component used for handling key press. Used only to ensure that the package can be migrated easily. Not required if you already setup your inputs from inside the Project Settings. Camera Setup To ensure that the target switching can be performed smoothly, make sure to attach your camera to a SpringArm component. The EnableCameraRotationLag property of the SpringArm will need to be set to true for this to work. If the camera setups above are not performed, the lock-on target switch will be performend without any smooth easing/transition. Functionality setup Inside the LockOnCharacter, there are several nodes grouped under different colors. These will need to be added to your character/actor depending on your requirements. Explanation about the colored nodes are given below. Add Setup Nodes The LockOnManager.Setup node is mandatory and needs to be called before using any of the other functions. The SetupDemoUI node is optional and can be removed/ignored, it's mostly used for demo purposes. How to Activate/Deactivate Lock-On There are 3 functions that can be used to activate/deactivate the Lock-On system. ToggleLockOn ActivateLockOn DeactivateLockOn Each nodes performs the action that their names implied. For demo purpose, the ToggleLockOn function is used as the default action on the example LockOnCharacter . You should add it to How to Switch Target Switching targets are performed by doing a quick flick towards the direction of the next target. Separate functions are provided depending on whether you flick using a mouse or a gamepad thumbstick. Orbiting Around the Target Use the TryOrbitForward and TryOrbitRight function to move the character around the target during Lock-On. This should be used to replace normal movement when the lock-on is active. Normal Camera Control and Movement The lock-on system expects that you connect the direct values from your movement and camera inputs to the LockOnManager 's orbit and flick functions. Due to this, to perform normal camera and movement control (when the lock-on is off) , you will need to add the following events in your character/actor. For camera control: OnGamepadCameraYaw OnGamepadCameraPitch OnMouseCameraYaw OnMouseCameraPitch For normal movement: OnDefaultMoveForward OnDefaultMoveRight These nodes ensure that normal camera control and movement can be processed when the Lock-On is disabled. Do make sure to connect your camera and movement control nodes to these events.","title":"Lock-On Setup"},{"location":"setup/#lock-on-setup","text":"These steps are performed on the character/actor that you wish to add the lock-on functionality to, not the target.","title":"Lock-On Setup"},{"location":"setup/#prepare-a-characteractor","text":"First of all, make sure you have a character/actor ready for the project. On the package, there is an example character included in Content/LockOn360/Demo/Blueprints/Character/LockOnCharacter . This is the character used for the LockOn360 demo, you can use this as your reference. If you're new to Unreal Engine, it's recommended that you start by creating a new project based on the editor's ThirdPerson template. The LockOnCharacter example is more or less compatible with Unreal's ThirdPersonCharacter .","title":"Prepare a character/actor"},{"location":"setup/#lock-on-component-setup","text":"Next is to add a LockOnManager component towards the actor/character. You will need to do this to the character/actor that you wish to give the lock-on functionality to. Navigate to the character/actor blueprint, open the file. Inside the component tab (usually placed at the top left of the editor) , there should be an \"Add Component\" button. Press the button and add the following components: LockOnManager (required) Contains the logic for handling the 360 lock-on system. KeyPressHandler (optional) Optional component used for handling key press. Used only to ensure that the package can be migrated easily. Not required if you already setup your inputs from inside the Project Settings.","title":"Lock-On component setup"},{"location":"setup/#camera-setup","text":"To ensure that the target switching can be performed smoothly, make sure to attach your camera to a SpringArm component. The EnableCameraRotationLag property of the SpringArm will need to be set to true for this to work. If the camera setups above are not performed, the lock-on target switch will be performend without any smooth easing/transition.","title":"Camera Setup"},{"location":"setup/#functionality-setup","text":"Inside the LockOnCharacter, there are several nodes grouped under different colors. These will need to be added to your character/actor depending on your requirements. Explanation about the colored nodes are given below.","title":"Functionality setup"},{"location":"setup/#add-setup-nodes","text":"The LockOnManager.Setup node is mandatory and needs to be called before using any of the other functions. The SetupDemoUI node is optional and can be removed/ignored, it's mostly used for demo purposes.","title":"Add Setup Nodes"},{"location":"setup/#how-to-activatedeactivate-lock-on","text":"There are 3 functions that can be used to activate/deactivate the Lock-On system. ToggleLockOn ActivateLockOn DeactivateLockOn Each nodes performs the action that their names implied. For demo purpose, the ToggleLockOn function is used as the default action on the example LockOnCharacter . You should add it to","title":"How to Activate/Deactivate Lock-On"},{"location":"setup/#how-to-switch-target","text":"Switching targets are performed by doing a quick flick towards the direction of the next target. Separate functions are provided depending on whether you flick using a mouse or a gamepad thumbstick.","title":"How to Switch Target"},{"location":"setup/#orbiting-around-the-target","text":"Use the TryOrbitForward and TryOrbitRight function to move the character around the target during Lock-On. This should be used to replace normal movement when the lock-on is active.","title":"Orbiting Around the Target"},{"location":"setup/#normal-camera-control-and-movement","text":"The lock-on system expects that you connect the direct values from your movement and camera inputs to the LockOnManager 's orbit and flick functions. Due to this, to perform normal camera and movement control (when the lock-on is off) , you will need to add the following events in your character/actor. For camera control: OnGamepadCameraYaw OnGamepadCameraPitch OnMouseCameraYaw OnMouseCameraPitch For normal movement: OnDefaultMoveForward OnDefaultMoveRight These nodes ensure that normal camera control and movement can be processed when the Lock-On is disabled. Do make sure to connect your camera and movement control nodes to these events.","title":"Normal Camera Control and Movement"},{"location":"targetsetup/","text":"Lock-On Target Setup These steps are performed on the character/actor that you wish to use as a target. Overview The LockOnTarget component is used to designate the location of the target. The LockOnManager component will detect any LockOnTarget that is visible from the camera, within the designated search radius. You can add more than one of these LockOnTarget components inside your actor/character. These can be used to register multiple target points inside an actor, for example to represent separate target points on a character's limbs or head, or maybe a vehicle's doors or wheels. For reference, the package includes some target examples in Content/LockOn360/Demo/Blueprints/Actors . These includes, TargetBall Used to demonstrate single target lock-on. TargetCharacter Used to demonstrate multiple target lock-on. Steps For detailed steps on how to add LockOnTarget to your actor, Navigate to the character/actor blueprint that you wish to use as your target, open the file. Press the Add Component button (top left section of the editor, inside the component tab) . Add one or more LockOnTarget components as required. You can adjust the placement of the LockOnTarget from the Viewport editor of you actor's/character's blueprint. The component can be attached to a bone/socket if required, it can be accessed from the details tab.","title":"Target Setup"},{"location":"targetsetup/#lock-on-target-setup","text":"These steps are performed on the character/actor that you wish to use as a target.","title":"Lock-On Target Setup"},{"location":"targetsetup/#overview","text":"The LockOnTarget component is used to designate the location of the target. The LockOnManager component will detect any LockOnTarget that is visible from the camera, within the designated search radius. You can add more than one of these LockOnTarget components inside your actor/character. These can be used to register multiple target points inside an actor, for example to represent separate target points on a character's limbs or head, or maybe a vehicle's doors or wheels. For reference, the package includes some target examples in Content/LockOn360/Demo/Blueprints/Actors . These includes, TargetBall Used to demonstrate single target lock-on. TargetCharacter Used to demonstrate multiple target lock-on.","title":"Overview"},{"location":"targetsetup/#steps","text":"For detailed steps on how to add LockOnTarget to your actor, Navigate to the character/actor blueprint that you wish to use as your target, open the file. Press the Add Component button (top left section of the editor, inside the component tab) . Add one or more LockOnTarget components as required. You can adjust the placement of the LockOnTarget from the Viewport editor of you actor's/character's blueprint. The component can be attached to a bone/socket if required, it can be accessed from the details tab.","title":"Steps"},{"location":"ui_customization/","text":"Lock-On 360 - UI Customization Overview Open your character blueprint, select the LockOnManager, then go to the Details tab. The settings listed below can be found under the UI section. Customizing the Active Target Indicator (Crosshair) When the system found and locked on to a target, a basic crosshair will be shown on the screen. This crosshair is a placeholder UI that can be found in Content/LockOn360/Blueprints/UI/UI_ActiveTarget . It's made of a single image inside a UserWidget. To modify the appearance, you can provide your own custom UserWidget, and set it as the value of UI_ActiveTarget . Setting this value to None will ensure that no UI is shown when the active target is locked on to. Customizing the Potential Target Indicator (Circle Indicator) When the lock-on is activated, all potential targets that is currently visible on the screen will be marked using a white circle/halo indicator. This halo is placed on all potential targets, including the currently active target. Just like the crosshair, this is made from a UserWidget containing a single image, it can be found in Content/LockOn360/Blueprints/UI/UI_ActiveTarget . To modify the appearance, you can provide your own custom user widget, and set it as the value of UI_PotentialTarget . Setting this value to None will remove the UI from all of the potential targets, including the currently active target. Customizing the Potential Target Lines When a target is found, white lines will be shown coming from the currently active target, pointing towards all the other potential targets that is currently visible on screen. You can turn these lines on/off by changing the value of IsDrawPotentialLine . To change the line color and transparency, set the PotentialLineColor value according to your preference. Customizing the Flick Indicator Line By default, a momentary line visualizing the direction of your flick gesture will be shown when you move either your mouse or gamepad thumbstick. This is mostly meant for debug purposes and can be safely turned off it not necessary. You can turn this line on/off by changing the value of IsDrawFlickLine . To change the line color and transparency, set the FlickLineColor value according to your preference.","title":"UI Customization"},{"location":"ui_customization/#lock-on-360-ui-customization","text":"","title":"Lock-On 360 - UI Customization"},{"location":"ui_customization/#overview","text":"Open your character blueprint, select the LockOnManager, then go to the Details tab. The settings listed below can be found under the UI section.","title":"Overview"},{"location":"ui_customization/#customizing-the-active-target-indicator-crosshair","text":"When the system found and locked on to a target, a basic crosshair will be shown on the screen. This crosshair is a placeholder UI that can be found in Content/LockOn360/Blueprints/UI/UI_ActiveTarget . It's made of a single image inside a UserWidget. To modify the appearance, you can provide your own custom UserWidget, and set it as the value of UI_ActiveTarget . Setting this value to None will ensure that no UI is shown when the active target is locked on to.","title":"Customizing the Active Target Indicator (Crosshair)"},{"location":"ui_customization/#customizing-the-potential-target-indicator-circle-indicator","text":"When the lock-on is activated, all potential targets that is currently visible on the screen will be marked using a white circle/halo indicator. This halo is placed on all potential targets, including the currently active target. Just like the crosshair, this is made from a UserWidget containing a single image, it can be found in Content/LockOn360/Blueprints/UI/UI_ActiveTarget . To modify the appearance, you can provide your own custom user widget, and set it as the value of UI_PotentialTarget . Setting this value to None will remove the UI from all of the potential targets, including the currently active target.","title":"Customizing the Potential Target Indicator (Circle Indicator)"},{"location":"ui_customization/#customizing-the-potential-target-lines","text":"When a target is found, white lines will be shown coming from the currently active target, pointing towards all the other potential targets that is currently visible on screen. You can turn these lines on/off by changing the value of IsDrawPotentialLine . To change the line color and transparency, set the PotentialLineColor value according to your preference.","title":"Customizing the Potential Target Lines"},{"location":"ui_customization/#customizing-the-flick-indicator-line","text":"By default, a momentary line visualizing the direction of your flick gesture will be shown when you move either your mouse or gamepad thumbstick. This is mostly meant for debug purposes and can be safely turned off it not necessary. You can turn this line on/off by changing the value of IsDrawFlickLine . To change the line color and transparency, set the FlickLineColor value according to your preference.","title":"Customizing the Flick Indicator Line"},{"location":"versionhistory/","text":"Lock-On 360 - Version History Ver 1.0.1 Added ConfirmLockOnActive function Used to check whether the lock-on is currently active or not. Added LockOnUpdaterFramerate property to LockOnManager Used to control the update frequency of the lock-on system, default value set to 120 FPS. Lower framerates might lead to unwanted shakes and jittery to the camera movement. Removed OnDefaultCameraYaw and OnDefaultCameraPitch Redundant events. Role already fulfilled by OnGamepadCameraYaw, OnGamepadCameraPitch, OnMouseCameraYaw, OnMouseCameraPitch. Added UI settings: FlickLineColor and PotentialLineColor FlickLineColor is the color of the line that indicates the direction of the flick, appears only momentarily. PotentialLineColor is the color of the lines that indicates all possible targets on the screen. Both settings can be changed from the Details tab of the LockOnManager component. Added some properties to access the lock-on targets. CurrentTarget returns the currently active target. PotentialTargetList returns all of the possible lock-on target that is visible on the screen. IsTrackPotentialTargetList is the flag used to ensure that PotentialTargetList is updated every cycle. Ver 1.0.0 Lock-On 360 initial release","title":"Version History"},{"location":"versionhistory/#lock-on-360-version-history","text":"","title":"Lock-On 360 - Version History"},{"location":"versionhistory/#ver-101","text":"Added ConfirmLockOnActive function Used to check whether the lock-on is currently active or not. Added LockOnUpdaterFramerate property to LockOnManager Used to control the update frequency of the lock-on system, default value set to 120 FPS. Lower framerates might lead to unwanted shakes and jittery to the camera movement. Removed OnDefaultCameraYaw and OnDefaultCameraPitch Redundant events. Role already fulfilled by OnGamepadCameraYaw, OnGamepadCameraPitch, OnMouseCameraYaw, OnMouseCameraPitch. Added UI settings: FlickLineColor and PotentialLineColor FlickLineColor is the color of the line that indicates the direction of the flick, appears only momentarily. PotentialLineColor is the color of the lines that indicates all possible targets on the screen. Both settings can be changed from the Details tab of the LockOnManager component. Added some properties to access the lock-on targets. CurrentTarget returns the currently active target. PotentialTargetList returns all of the possible lock-on target that is visible on the screen. IsTrackPotentialTargetList is the flag used to ensure that PotentialTargetList is updated every cycle.","title":"Ver 1.0.1"},{"location":"versionhistory/#ver-100","text":"Lock-On 360 initial release","title":"Ver 1.0.0"}]}