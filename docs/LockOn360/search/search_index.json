{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lock-On 360 Introduction This is the documentation for the Lock-On 360 package, last updated for Version 1.0.0 . The following documentation is presented as a guide on how to setup the package and use it inside your project. This documentation is written for Unreal Editor version 4.21.2 and higher. Basic knowledge on how to navigate through the Unreal Editor is expected. Any questions related to this package and documentation can be delivered to our team through the following channels, Email : zennodez@gmail.com Discord : https://discord.gg/dn62e2udDx To proceed with the guide, head over to the next page . Back to Main Page","title":"Index"},{"location":"#lock-on-360","text":"","title":"Lock-On 360"},{"location":"#introduction","text":"This is the documentation for the Lock-On 360 package, last updated for Version 1.0.0 . The following documentation is presented as a guide on how to setup the package and use it inside your project. This documentation is written for Unreal Editor version 4.21.2 and higher. Basic knowledge on how to navigate through the Unreal Editor is expected. Any questions related to this package and documentation can be delivered to our team through the following channels, Email : zennodez@gmail.com Discord : https://discord.gg/dn62e2udDx To proceed with the guide, head over to the next page . Back to Main Page","title":"Introduction"},{"location":"setup/","text":"Lock-On Setup Prepare a character/actor First of all, make sure you have a character/actor ready for the project. On the package, there is an example character included in Content/LockOn360/Blueprints/Character/LockOnCharacter . This is the character used for the LockOn360 demo, you can use this as your reference. If you're new to Unreal Engine, it's recommended that you start by creating a new project based on the editor's ThirdPerson template. The LockOnCharacter example is more or less compatible with Unreal's ThirdPersonCharacter . Lock-On component setup This step should be performed on the character/actor that you wish to give the lock-on functionality to. Navigate to the character/actor blueprint, open the file. Inside the component tab (usually placed at the top left of the editor) , there should be an \"Add Component\" button. Press the button and add the following components: LockOnManager (required) Contains the logic for handling the 360 lock-on system. KeyPressHandler (optional) Optional component used for handling key press. Used only to ensure that the package can be migrated easily. Not required if you already setup your inputs from inside the Project Settings. Camera Setup To ensure that the target switching can be performed smoothly, make sure to attach your camera to a SpringArm component. The EnableCameraRotationLag property of the SpringArm will need to be set to true for this to work. Functionality setup Inside the LockOnCharacter, there are several nodes grouped under different colors. Explanation about the colored nodes are given below. Setup Nodes The LockOnManager.Setup node is mandatory and needs to be called before using any of the other functions. The SetupDemoUI node is optional and can be removed/ignored, it's mostly used for demo purposes. Activate/Deactivate/Toggle Lock-On There are 3 functions that can be used to activate/deactivate the Lock-On system. ToggleLockOn ActivateLockOn DeactivateLockOn For demo purpose, the ToggleLockOn function is used as the default action. Switching Targets Switching targets are performed by doing a quick flick towards the direction of the next target. Separate functions are provided depending on whether you flick using a mouse or a gamepad thumbstick. Orbiting Around the Target Use the TryOrbitForward and TryOrbitRight function to move the character around the target during Lock-On. Normal Camera Control and Movement The LockOnManager have 4 important events that you will need to register in your character. OnDefaultCameraYaw OnDefaultCameraPitch OnDefaultMoveForward OnDefaultMoveRight These nodes ensure that normal camera control and movement can be processed when the Lock-On is disabled. Please make sure to connect your camera and movement control nodes to these events.","title":"Lock-On Setup"},{"location":"setup/#lock-on-setup","text":"","title":"Lock-On Setup"},{"location":"setup/#prepare-a-characteractor","text":"First of all, make sure you have a character/actor ready for the project. On the package, there is an example character included in Content/LockOn360/Blueprints/Character/LockOnCharacter . This is the character used for the LockOn360 demo, you can use this as your reference. If you're new to Unreal Engine, it's recommended that you start by creating a new project based on the editor's ThirdPerson template. The LockOnCharacter example is more or less compatible with Unreal's ThirdPersonCharacter .","title":"Prepare a character/actor"},{"location":"setup/#lock-on-component-setup","text":"This step should be performed on the character/actor that you wish to give the lock-on functionality to. Navigate to the character/actor blueprint, open the file. Inside the component tab (usually placed at the top left of the editor) , there should be an \"Add Component\" button. Press the button and add the following components: LockOnManager (required) Contains the logic for handling the 360 lock-on system. KeyPressHandler (optional) Optional component used for handling key press. Used only to ensure that the package can be migrated easily. Not required if you already setup your inputs from inside the Project Settings.","title":"Lock-On component setup"},{"location":"setup/#camera-setup","text":"To ensure that the target switching can be performed smoothly, make sure to attach your camera to a SpringArm component. The EnableCameraRotationLag property of the SpringArm will need to be set to true for this to work.","title":"Camera Setup"},{"location":"setup/#functionality-setup","text":"Inside the LockOnCharacter, there are several nodes grouped under different colors. Explanation about the colored nodes are given below.","title":"Functionality setup"},{"location":"setup/#setup-nodes","text":"The LockOnManager.Setup node is mandatory and needs to be called before using any of the other functions. The SetupDemoUI node is optional and can be removed/ignored, it's mostly used for demo purposes.","title":"Setup Nodes"},{"location":"setup/#activatedeactivatetoggle-lock-on","text":"There are 3 functions that can be used to activate/deactivate the Lock-On system. ToggleLockOn ActivateLockOn DeactivateLockOn For demo purpose, the ToggleLockOn function is used as the default action.","title":"Activate/Deactivate/Toggle Lock-On"},{"location":"setup/#switching-targets","text":"Switching targets are performed by doing a quick flick towards the direction of the next target. Separate functions are provided depending on whether you flick using a mouse or a gamepad thumbstick.","title":"Switching Targets"},{"location":"setup/#orbiting-around-the-target","text":"Use the TryOrbitForward and TryOrbitRight function to move the character around the target during Lock-On.","title":"Orbiting Around the Target"},{"location":"setup/#normal-camera-control-and-movement","text":"The LockOnManager have 4 important events that you will need to register in your character. OnDefaultCameraYaw OnDefaultCameraPitch OnDefaultMoveForward OnDefaultMoveRight These nodes ensure that normal camera control and movement can be processed when the Lock-On is disabled. Please make sure to connect your camera and movement control nodes to these events.","title":"Normal Camera Control and Movement"},{"location":"targetsetup/","text":"Lock-On Target Setup Overview This step is performed on the character/actor that you wish to use as a target. The LockOnTarget component is used to designate the location of the target. The LockOnManager component will detect any LockOnTarget that is visible from the camera, within the designated search radius. You can add more than one of these LockOnTarget components inside your actor/character. These can be used to register multiple target points inside an actor, for example to represent separate target points on a character's limbs or head, or maybe a vehicle's doors or wheels. For reference, the package includes some target examples in Content/LockOn360/Blueprints/Actors . These includes, TargetBall Used to demonstrate single target lock-on. TargetCharacter Used to demonstrate multiple target lock-on. Steps For detailed steps on how to add LockOnTarget to your actor, Navigate to the character/actor blueprint that you wish to use as your target, open the file. Press the Add Component button (top left section of the editor, inside the component tab) . Add one or more LockOnTarget components as required. You can adjust the placement of the LockOnTarget from the Viewport editor of you actor's/character's blueprint. The component can be attached to a bone/socket if required, it can be accessed from the details tab.","title":"Target Setup"},{"location":"targetsetup/#lock-on-target-setup","text":"","title":"Lock-On Target Setup"},{"location":"targetsetup/#overview","text":"This step is performed on the character/actor that you wish to use as a target. The LockOnTarget component is used to designate the location of the target. The LockOnManager component will detect any LockOnTarget that is visible from the camera, within the designated search radius. You can add more than one of these LockOnTarget components inside your actor/character. These can be used to register multiple target points inside an actor, for example to represent separate target points on a character's limbs or head, or maybe a vehicle's doors or wheels. For reference, the package includes some target examples in Content/LockOn360/Blueprints/Actors . These includes, TargetBall Used to demonstrate single target lock-on. TargetCharacter Used to demonstrate multiple target lock-on.","title":"Overview"},{"location":"targetsetup/#steps","text":"For detailed steps on how to add LockOnTarget to your actor, Navigate to the character/actor blueprint that you wish to use as your target, open the file. Press the Add Component button (top left section of the editor, inside the component tab) . Add one or more LockOnTarget components as required. You can adjust the placement of the LockOnTarget from the Viewport editor of you actor's/character's blueprint. The component can be attached to a bone/socket if required, it can be accessed from the details tab.","title":"Steps"}]}