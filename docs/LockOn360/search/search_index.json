{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lock-On 360 Lock-On 360 Introduction This is the documentation for the Lock-On 360 package, last updated for Version 1.1.0 . The following documentation is presented as a guide on how to setup the package and use it inside your project. This documentation is written for Unreal Editor version 4.21.2 and higher. Basic knowledge on how to navigate through the Unreal Editor is expected. Any questions related to this package and documentation can be delivered to our team through the following channels, Email : zennodez@gmail.com Discord : https://discord.gg/dn62e2udDx To see what have been changed in the latest version, see Version History . For a list of recommended topics, see the list of topics below. To proceed with the guide, head over to the next page . List of Topics How to setup the Lock-On system How to add one or more target points to your existing actor/character How to customize the user interface How to customize the lock-on behaviors and advanced settings List of functions and events Back to Main Page","title":"Index"},{"location":"#lock-on-360","text":"Lock-On 360","title":"Lock-On 360"},{"location":"#introduction","text":"This is the documentation for the Lock-On 360 package, last updated for Version 1.1.0 . The following documentation is presented as a guide on how to setup the package and use it inside your project. This documentation is written for Unreal Editor version 4.21.2 and higher. Basic knowledge on how to navigate through the Unreal Editor is expected. Any questions related to this package and documentation can be delivered to our team through the following channels, Email : zennodez@gmail.com Discord : https://discord.gg/dn62e2udDx To see what have been changed in the latest version, see Version History . For a list of recommended topics, see the list of topics below. To proceed with the guide, head over to the next page .","title":"Introduction"},{"location":"#list-of-topics","text":"How to setup the Lock-On system How to add one or more target points to your existing actor/character How to customize the user interface How to customize the lock-on behaviors and advanced settings List of functions and events Back to Main Page","title":"List of Topics"},{"location":"functions/","text":"Lock-On 360 - Functions Confirm Lock-on Active Output IsLockOnActive Returns true if the lock on is activated. Get Current Target Output IsTargetExist Returns true if the lock on system is currently focusing on an active target. CurrentLockOnTarget The current LockOnTarget component that the system is being locked-on to. CharacterToTargetDistance The distance between the character and the currently active LockOnTarget component. Get Ouf-of-Range Status Output IsOutOfRange Returns true if the currently active target is out of range, false otherwise. CharacterToTargetDistance The distance between the currently active target and the character. Distance unit in centimeters. OutOfRangeDistance The out-of-range distance limit between target and character. Distance unit in centimeters. If TargetToCharacterDistance is much further than the OutOfRangeDistance , IsOutOfRange returns true. TimeRemainingBeforeDeactivation The amount of time left before the system automatically deactivate the current lock-on session. Time unit in seconds. The deactivation will be cancelled if the distance between target and character is restored to below CharacterToTargetDistance before TimeRemainingBeforeDeactivation reaches 0. DefaultOutOfRangeTimeLimit The time window/delay of how long should a target remains locked on to the system once its distance falls out of range. Time unit is in seconds. Get Out-of-range Distance Output OutOfRangeDistance The out-of-range distance limit between target and character. Distance unit in centimeters. If TargetToCharacterDistance is much further than the OutOfRangeDistance , IsOutOfRange returns true. Set Camera Proximity Details Input Camera Proximity Limit This value determines the minimum distance of how close the camera should be towards the target. The distance unit is in centimeters. The limit will be respected as long as there is no visible obstacle between the target and the camera. If an obstacle is found, the camera might be placed much closer to the target than the expected proximity limit. Get Camera Proximity Details Output IsProximityLimitApplied Returns true if camera proximity limit is enabled. IstargetObscuredFromCamera Returns true if there is an obstacle between the target and the expected location of where the camera is supposed to be when proximity limit is enabled. Target to Camera Proximity Limit The minimum distance of how close the camera should be towards the target. Distance unit is in centimeters. Target to Camera Distance The actual distance between the camera and the target. Distance unit is in centimeters. Try Orbit Forward/Right Input AxisValue Determines the amount of input value given to perform orbit forward/right movement. If the lock-on system is not active, this function will call its respective Default Move events. Output IsProcessed Returns true if AxisValue is not 0, and active lock-on target exists. Mouse/Gamepad Flick Up/Right Input AxisValue Determines the amount of input value is given to perform a flick, will be calculated to check whether a flick is activated or not. If the lock-on system is not active, this function will call its respective Camera Yaw/Pitch events.","title":"Functions"},{"location":"functions/#lock-on-360-functions","text":"","title":"Lock-On 360 - Functions"},{"location":"functions/#confirm-lock-on-active","text":"Output IsLockOnActive Returns true if the lock on is activated.","title":"Confirm Lock-on Active"},{"location":"functions/#get-current-target","text":"Output IsTargetExist Returns true if the lock on system is currently focusing on an active target. CurrentLockOnTarget The current LockOnTarget component that the system is being locked-on to. CharacterToTargetDistance The distance between the character and the currently active LockOnTarget component.","title":"Get Current Target"},{"location":"functions/#get-ouf-of-range-status","text":"Output IsOutOfRange Returns true if the currently active target is out of range, false otherwise. CharacterToTargetDistance The distance between the currently active target and the character. Distance unit in centimeters. OutOfRangeDistance The out-of-range distance limit between target and character. Distance unit in centimeters. If TargetToCharacterDistance is much further than the OutOfRangeDistance , IsOutOfRange returns true. TimeRemainingBeforeDeactivation The amount of time left before the system automatically deactivate the current lock-on session. Time unit in seconds. The deactivation will be cancelled if the distance between target and character is restored to below CharacterToTargetDistance before TimeRemainingBeforeDeactivation reaches 0. DefaultOutOfRangeTimeLimit The time window/delay of how long should a target remains locked on to the system once its distance falls out of range. Time unit is in seconds.","title":"Get Ouf-of-Range Status"},{"location":"functions/#get-out-of-range-distance","text":"Output OutOfRangeDistance The out-of-range distance limit between target and character. Distance unit in centimeters. If TargetToCharacterDistance is much further than the OutOfRangeDistance , IsOutOfRange returns true.","title":"Get Out-of-range Distance"},{"location":"functions/#set-camera-proximity-details","text":"Input Camera Proximity Limit This value determines the minimum distance of how close the camera should be towards the target. The distance unit is in centimeters. The limit will be respected as long as there is no visible obstacle between the target and the camera. If an obstacle is found, the camera might be placed much closer to the target than the expected proximity limit.","title":"Set Camera Proximity Details"},{"location":"functions/#get-camera-proximity-details","text":"Output IsProximityLimitApplied Returns true if camera proximity limit is enabled. IstargetObscuredFromCamera Returns true if there is an obstacle between the target and the expected location of where the camera is supposed to be when proximity limit is enabled. Target to Camera Proximity Limit The minimum distance of how close the camera should be towards the target. Distance unit is in centimeters. Target to Camera Distance The actual distance between the camera and the target. Distance unit is in centimeters.","title":"Get Camera Proximity Details"},{"location":"functions/#try-orbit-forwardright","text":"Input AxisValue Determines the amount of input value given to perform orbit forward/right movement. If the lock-on system is not active, this function will call its respective Default Move events. Output IsProcessed Returns true if AxisValue is not 0, and active lock-on target exists.","title":"Try Orbit Forward/Right"},{"location":"functions/#mousegamepad-flick-upright","text":"Input AxisValue Determines the amount of input value is given to perform a flick, will be calculated to check whether a flick is activated or not. If the lock-on system is not active, this function will call its respective Camera Yaw/Pitch events.","title":"Mouse/Gamepad Flick Up/Right"},{"location":"settings/","text":"Lock-on 360 - Advanced Settings and Usage Lock-on Data Getting the currently active target To get the currently active lock-on target, you can use either the CurrentTarget variable of the LockOnManager, or the GetCurrentTarget function. This will give you the target that is currently being locked inside the UI crosshair. Getting the list of all potential targets To get the list of all the potential targets that is currently available on screen, use the PotentialTargetList variable. This list will return all the potential targets on screen, but will not include the currently active lock-on target. Do note that you will need to set IsTrackPotentialTargetList to true to ensure the list is valid. If IsTrackPotentialTargetList is set to false, PotentialTargetList will not be updated and will always be empty. Lock-on Settings The lock-on settings can be customized from the Details tab of the LockOnManager component. Detailed explanation for each property can be found below. Lock-on Radius Determines the maximum distance/range of the lock-on detection. Any target whose distance to the character is within this lock-on radius and is visible on the screen will be seen as a potential target. Distance unit is in centimeters. Mouse Flick Threshold Determines the sensitivity of how far should the mouse be moved in quick succession before the system registers it as a flick. The lower the value, the more sensitive the target switching will be. Since even a tiny movement can be easily registered as a flick. While the higher the value, the less sensitive it will be. Since more distance will be required for the movement to be registered as a flick. Setting the value to 0 will not do anything, since 0 will not be processed as a valid input. Gamepad Flick Threshold Determines the sensitivity of how far should the gamepad thumbstick be moved in quick succession before the system registers it as a flick. The lower the value, the more sensitive the target switching will be. Since even a tiny movement can be easily registered as a flick. While the higher the value, the less sensitive it will be. Since more distance will be required for the movement to be registered as a flick. Setting the value to 0 will not do anything, 0 will not be processed as a valid input. Flick Cooldown Time This value determines a cooldown time before another flick can be registered after a previous one have been performed. This affects both how fast a flick is processed, as well as how long would the lock-on system stay on a target before it can move to another one. The time unit is in seconds. If this value is set to low, the lock-on might feel a little wild since the switching will be rather rapid. If this value is set to high, it might take too long for the system to perform a switch to another target. Please adjust this value accordingly depending on your requirements. Camera Proximity Limit This value determines the minimum distance of how close the camera should be towards the target. The distance unit is in centimeters. The limit will be respected as long as there is no visible obstacle between the target and the camera. If an obstacle is found, the camera might be placed much closer to the target than the expected proximity limit. Out of Range Settings The out of range deactivation settings can be found on the Details tab of the LockOnManager component. Detailed explanation for each property can be found below. Is Deactivated When Out Of Range This boolean value determines whether the Lock-on system will automatically deactivate itself or not when the target is out of range. The value is registered once at the start of the runtime, and overwritten whenever ToggleLockOn or ActivateLockOn is called. If you want to preserve your last setting, make sure to use this value as an input to the IsDeactivatedWhenOutOfRange parameter to both of those functions Additional Deactivation Distance This is an optional value that modifies how far the deactivation/out of range distance is relative to the LockOnRadius value. Distance unit is in centimeters. Positive value means additional distance, negative value means a decrease in distance. Out Of Range Time Limit This determines how long should a target remains locked on to the system once its distance falls out of range. Time unit is in seconds. Set this value to 0 if you want the system to immediately lose the target without delay.","title":"Advanced Settings"},{"location":"settings/#lock-on-360-advanced-settings-and-usage","text":"","title":"Lock-on 360 - Advanced Settings and Usage"},{"location":"settings/#lock-on-data","text":"","title":"Lock-on Data"},{"location":"settings/#getting-the-currently-active-target","text":"To get the currently active lock-on target, you can use either the CurrentTarget variable of the LockOnManager, or the GetCurrentTarget function. This will give you the target that is currently being locked inside the UI crosshair.","title":"Getting the currently active target"},{"location":"settings/#getting-the-list-of-all-potential-targets","text":"To get the list of all the potential targets that is currently available on screen, use the PotentialTargetList variable. This list will return all the potential targets on screen, but will not include the currently active lock-on target. Do note that you will need to set IsTrackPotentialTargetList to true to ensure the list is valid. If IsTrackPotentialTargetList is set to false, PotentialTargetList will not be updated and will always be empty.","title":"Getting the list of all potential targets"},{"location":"settings/#lock-on-settings","text":"The lock-on settings can be customized from the Details tab of the LockOnManager component. Detailed explanation for each property can be found below. Lock-on Radius Determines the maximum distance/range of the lock-on detection. Any target whose distance to the character is within this lock-on radius and is visible on the screen will be seen as a potential target. Distance unit is in centimeters. Mouse Flick Threshold Determines the sensitivity of how far should the mouse be moved in quick succession before the system registers it as a flick. The lower the value, the more sensitive the target switching will be. Since even a tiny movement can be easily registered as a flick. While the higher the value, the less sensitive it will be. Since more distance will be required for the movement to be registered as a flick. Setting the value to 0 will not do anything, since 0 will not be processed as a valid input. Gamepad Flick Threshold Determines the sensitivity of how far should the gamepad thumbstick be moved in quick succession before the system registers it as a flick. The lower the value, the more sensitive the target switching will be. Since even a tiny movement can be easily registered as a flick. While the higher the value, the less sensitive it will be. Since more distance will be required for the movement to be registered as a flick. Setting the value to 0 will not do anything, 0 will not be processed as a valid input. Flick Cooldown Time This value determines a cooldown time before another flick can be registered after a previous one have been performed. This affects both how fast a flick is processed, as well as how long would the lock-on system stay on a target before it can move to another one. The time unit is in seconds. If this value is set to low, the lock-on might feel a little wild since the switching will be rather rapid. If this value is set to high, it might take too long for the system to perform a switch to another target. Please adjust this value accordingly depending on your requirements. Camera Proximity Limit This value determines the minimum distance of how close the camera should be towards the target. The distance unit is in centimeters. The limit will be respected as long as there is no visible obstacle between the target and the camera. If an obstacle is found, the camera might be placed much closer to the target than the expected proximity limit.","title":"Lock-on Settings"},{"location":"settings/#out-of-range-settings","text":"The out of range deactivation settings can be found on the Details tab of the LockOnManager component. Detailed explanation for each property can be found below. Is Deactivated When Out Of Range This boolean value determines whether the Lock-on system will automatically deactivate itself or not when the target is out of range. The value is registered once at the start of the runtime, and overwritten whenever ToggleLockOn or ActivateLockOn is called. If you want to preserve your last setting, make sure to use this value as an input to the IsDeactivatedWhenOutOfRange parameter to both of those functions Additional Deactivation Distance This is an optional value that modifies how far the deactivation/out of range distance is relative to the LockOnRadius value. Distance unit is in centimeters. Positive value means additional distance, negative value means a decrease in distance. Out Of Range Time Limit This determines how long should a target remains locked on to the system once its distance falls out of range. Time unit is in seconds. Set this value to 0 if you want the system to immediately lose the target without delay.","title":"Out of Range Settings"},{"location":"setup/","text":"Lock-On Setup These steps are performed on the character that you wish to add the lock-on functionality to, not the target. Prepare a character Make sure you have a character ready for the project. On the package, there is an example character included in Content/LockOn360/Demo/Blueprints/Character/LockOnCharacter . This is the character used for the LockOn360 demo, you can use this as a reference. If you're new to Unreal Engine, it's recommended that you start by creating a new project based on the editor's ThirdPerson template. Component setup First thing to do is to add the LockOnManager component to your character (the one that you want to give the lock-on functionality to) . Navigate to your character blueprint, open it in the editor. Inside the component tab, there should be an \"Add Component\" button (usually placed at the top left of the editor) . Press the button and add the following components: LockOnManager (required) Contains the logic for handling the 360 lock-on system. SpringArm Make sure to attach your camera to the SpringArm component to ensure that the Lock-on system works accordingly. If you're using UE4 ThirdPersonCharacter, your default camera (FollowCamera) should already be connected to a SpringArm component named CameraBoom by default. Input redirection By design, Lock-on 360 requires you to connect the direct values of your movement/camera inputs to the LockOnManager's orbit and flick functions. Due to this, you will need to redirect your normal camera control and movement logic to the LockOnManager events mentioned below. This is to ensure that your normal movement/camera logic can be processed whenever the lock-on system is disabled. For camera control, you should redirect your default camera control to: OnGamepadCameraYaw OnGamepadCameraPitch OnMouseCameraYaw OnMouseCameraPitch For movement, you should redirect your default movement logic to: OnDefaultMoveForward OnDefaultMoveRight Activating/Deactivating the Lock-On System There are 3 functions that can be used to activate/deactivate the Lock-On system. ToggleLockOn ActivateLockOn DeactivateLockOn Each nodes performs the actions that their names implied. For demo purpose, the ToggleLockOn function is used as the default action on the example LockOnCharacter . Both ToggleLockOn and ActivateLockOn have a parameter named IsDeactivatedWhenOutOfRange . This parameter is used to determine whether the Lock-on system will automatically deactivate itself when the target is out of range. true will ensure that the lock-on is deactivated once the target is out of range for a certain period of time. false will keep the target locked-on, even if the target is not within range anymore. To read a more detailed explanation on the out of range settings, see Out-of-range Settings . Target Switching Functionalities In Lock-on 360, target switching is performed by doing a quick flick towards the direction of the next target. On the LockOnCharacter example, this can be done by either a flick of a mouse, or a flick of the gamepad's right thumbstick. To perform target switching, separate functions are provided depending on whether you flick using a mouse or a gamepad thumbstick. MouseFlickRight MouseFlickUp GamepadFlickRight GamepadFlickUp These functions should be connected to the default values of your camera inputs. Orbiting Around the Target To perform an orbit movement around the target when the lock-on is enabled, you will need to connect the following functions to your movement inputs. TryOrbitForward (To move the character towards and away from the target) TryOrbitRight (To move the character in an orbit around the target) The images below show an example of how the LockOnCharacter blueprint implements these functions. Do note that it might be different from the way you connect these functions to your project's movement input, whether it's in UE4 or UE5. Please adjust things accordingly depending on your project setup.","title":"Lock-On Setup"},{"location":"setup/#lock-on-setup","text":"These steps are performed on the character that you wish to add the lock-on functionality to, not the target.","title":"Lock-On Setup"},{"location":"setup/#prepare-a-character","text":"Make sure you have a character ready for the project. On the package, there is an example character included in Content/LockOn360/Demo/Blueprints/Character/LockOnCharacter . This is the character used for the LockOn360 demo, you can use this as a reference. If you're new to Unreal Engine, it's recommended that you start by creating a new project based on the editor's ThirdPerson template.","title":"Prepare a character"},{"location":"setup/#component-setup","text":"First thing to do is to add the LockOnManager component to your character (the one that you want to give the lock-on functionality to) . Navigate to your character blueprint, open it in the editor. Inside the component tab, there should be an \"Add Component\" button (usually placed at the top left of the editor) . Press the button and add the following components: LockOnManager (required) Contains the logic for handling the 360 lock-on system. SpringArm Make sure to attach your camera to the SpringArm component to ensure that the Lock-on system works accordingly. If you're using UE4 ThirdPersonCharacter, your default camera (FollowCamera) should already be connected to a SpringArm component named CameraBoom by default.","title":"Component setup"},{"location":"setup/#input-redirection","text":"By design, Lock-on 360 requires you to connect the direct values of your movement/camera inputs to the LockOnManager's orbit and flick functions. Due to this, you will need to redirect your normal camera control and movement logic to the LockOnManager events mentioned below. This is to ensure that your normal movement/camera logic can be processed whenever the lock-on system is disabled. For camera control, you should redirect your default camera control to: OnGamepadCameraYaw OnGamepadCameraPitch OnMouseCameraYaw OnMouseCameraPitch For movement, you should redirect your default movement logic to: OnDefaultMoveForward OnDefaultMoveRight","title":"Input redirection"},{"location":"setup/#activatingdeactivating-the-lock-on-system","text":"There are 3 functions that can be used to activate/deactivate the Lock-On system. ToggleLockOn ActivateLockOn DeactivateLockOn Each nodes performs the actions that their names implied. For demo purpose, the ToggleLockOn function is used as the default action on the example LockOnCharacter . Both ToggleLockOn and ActivateLockOn have a parameter named IsDeactivatedWhenOutOfRange . This parameter is used to determine whether the Lock-on system will automatically deactivate itself when the target is out of range. true will ensure that the lock-on is deactivated once the target is out of range for a certain period of time. false will keep the target locked-on, even if the target is not within range anymore. To read a more detailed explanation on the out of range settings, see Out-of-range Settings .","title":"Activating/Deactivating the Lock-On System"},{"location":"setup/#target-switching-functionalities","text":"In Lock-on 360, target switching is performed by doing a quick flick towards the direction of the next target. On the LockOnCharacter example, this can be done by either a flick of a mouse, or a flick of the gamepad's right thumbstick. To perform target switching, separate functions are provided depending on whether you flick using a mouse or a gamepad thumbstick. MouseFlickRight MouseFlickUp GamepadFlickRight GamepadFlickUp These functions should be connected to the default values of your camera inputs.","title":"Target Switching Functionalities"},{"location":"setup/#orbiting-around-the-target","text":"To perform an orbit movement around the target when the lock-on is enabled, you will need to connect the following functions to your movement inputs. TryOrbitForward (To move the character towards and away from the target) TryOrbitRight (To move the character in an orbit around the target) The images below show an example of how the LockOnCharacter blueprint implements these functions. Do note that it might be different from the way you connect these functions to your project's movement input, whether it's in UE4 or UE5. Please adjust things accordingly depending on your project setup.","title":"Orbiting Around the Target"},{"location":"targetsetup/","text":"Lock-On Target Setup These steps are performed on the character/actor that you wish to use as a target. Overview The LockOnTarget is a Scene Component used to specify the potential point/location where the lock-on system should be focusing on. The potential target location will be detected as long as the following conditions are met, the LockOnManager component is activated by the player the LockOnTarget component is visible on screen (when seen from the player's camera view) the LockOnTarget component is located within the search radius of the LockOnManager You can add more than one of these LockOnTarget components inside your actor/character. These can be used to register multiple target points inside an actor, for example to represent separate target points on a character's limbs or head, or maybe a vehicle's doors or wheels. For further reference, see Content/LockOn360/Demo/Blueprints/Actors . The following examples of how to use the LockOnTarget component are included there, TargetBall Used to demonstrate single target lock-on. TargetCharacter Used to demonstrate multiple target lock-on. How to add a Lock-on Target Navigate to the character/actor blueprint that you wish to use as your target, open the file. Press the Add Component button (top left section of the editor, inside the component tab) . Add one or more LockOnTarget components as required. You can adjust the placement of the LockOnTarget from the Viewport editor of your actor's/character's blueprint. The component can be attached to a bone/socket if required, it can be accessed from the details tab. Lock-on Target properties The following is a list of properties that can be customized for each LockOnTarget component. OwnerLabel The displayed label of the actor/pawn/character where this target point is placed on. If no value is assigned, the display name of the actor/pawn/character will be used as the default value. TargetLabel The displayed label of this specific target point. If no value is assigned, the display name of the LockOnTarget component will be used as the default value.","title":"Target Setup"},{"location":"targetsetup/#lock-on-target-setup","text":"These steps are performed on the character/actor that you wish to use as a target.","title":"Lock-On Target Setup"},{"location":"targetsetup/#overview","text":"The LockOnTarget is a Scene Component used to specify the potential point/location where the lock-on system should be focusing on. The potential target location will be detected as long as the following conditions are met, the LockOnManager component is activated by the player the LockOnTarget component is visible on screen (when seen from the player's camera view) the LockOnTarget component is located within the search radius of the LockOnManager You can add more than one of these LockOnTarget components inside your actor/character. These can be used to register multiple target points inside an actor, for example to represent separate target points on a character's limbs or head, or maybe a vehicle's doors or wheels. For further reference, see Content/LockOn360/Demo/Blueprints/Actors . The following examples of how to use the LockOnTarget component are included there, TargetBall Used to demonstrate single target lock-on. TargetCharacter Used to demonstrate multiple target lock-on.","title":"Overview"},{"location":"targetsetup/#how-to-add-a-lock-on-target","text":"Navigate to the character/actor blueprint that you wish to use as your target, open the file. Press the Add Component button (top left section of the editor, inside the component tab) . Add one or more LockOnTarget components as required. You can adjust the placement of the LockOnTarget from the Viewport editor of your actor's/character's blueprint. The component can be attached to a bone/socket if required, it can be accessed from the details tab.","title":"How to add a Lock-on Target"},{"location":"targetsetup/#lock-on-target-properties","text":"The following is a list of properties that can be customized for each LockOnTarget component. OwnerLabel The displayed label of the actor/pawn/character where this target point is placed on. If no value is assigned, the display name of the actor/pawn/character will be used as the default value. TargetLabel The displayed label of this specific target point. If no value is assigned, the display name of the LockOnTarget component will be used as the default value.","title":"Lock-on Target properties"},{"location":"ui_customization/","text":"Lock-On 360 - UI Customization Overview Open your character blueprint, select the LockOnManager, then go to the Details tab. You will find a list of settings that you can modify under the UI section to customize your Lock-on display. Customizing the Active Target Indicator (Crosshair) UI_ActiveTarget is the crosshair UI that appears when the system found and locked on to a target. You can set this value to your own custom user widget to customize the appearance. Setting this value to None will ensure that no UI is shown when the active target is locked on to. As of version 1.1.0, 4 variants of crosshair UIs are provided for reference, Content/LockOn360/Blueprints/UI/UI_ActiveTarget Content/LockOn360/Blueprints/UI/UI_ActiveTarget2 Content/LockOn360/Blueprints/UI/UI_DistanceTarget Content/LockOn360/Blueprints/UI/UI_DistanceTarget2 Customizing the Potential Target Indicator (Circle Indicator) UI_PotentialTarget is the UI used to mark all potential targets. By default this is set to Content/LockOn360/Blueprints/UI/UI_ActiveTarget . When the lock-on is activated, all potential targets that is currently visible on the screen will be marked using a white circle/halo indicator. This halo is placed on all potential targets, including the currently active target. Just like the crosshair, you can set this value to your own custom user widget. Setting this value to None will remove the UI from all of the potential targets, including the currently active target. Customizing the Potential Target Lines When a target is found, white lines will be shown coming from the currently active target, pointing towards all the other potential targets that is currently visible on screen. The white line is there to help you figure out which target is available for switching, and which direction you'll need to flick to in order to select them. You can turn these lines on/off by changing the value of IsDrawPotentialLine . To change the line color and transparency, set the PotentialLineColor value according to your preference. Customizing the Flick Indicator Line By default, a momentary line visualizing the direction of your flick gesture will be shown when you move either your mouse or gamepad thumbstick. This is mostly used for debug purposes, as an indicator to check where your flick is directed to. This line can be disabled during normal gameplay. You can turn this line on/off by changing the value of IsDrawFlickLine . To change the line color and transparency, set the FlickLineColor value according to your preference.","title":"UI Customization"},{"location":"ui_customization/#lock-on-360-ui-customization","text":"","title":"Lock-On 360 - UI Customization"},{"location":"ui_customization/#overview","text":"Open your character blueprint, select the LockOnManager, then go to the Details tab. You will find a list of settings that you can modify under the UI section to customize your Lock-on display.","title":"Overview"},{"location":"ui_customization/#customizing-the-active-target-indicator-crosshair","text":"UI_ActiveTarget is the crosshair UI that appears when the system found and locked on to a target. You can set this value to your own custom user widget to customize the appearance. Setting this value to None will ensure that no UI is shown when the active target is locked on to. As of version 1.1.0, 4 variants of crosshair UIs are provided for reference, Content/LockOn360/Blueprints/UI/UI_ActiveTarget Content/LockOn360/Blueprints/UI/UI_ActiveTarget2 Content/LockOn360/Blueprints/UI/UI_DistanceTarget Content/LockOn360/Blueprints/UI/UI_DistanceTarget2","title":"Customizing the Active Target Indicator (Crosshair)"},{"location":"ui_customization/#customizing-the-potential-target-indicator-circle-indicator","text":"UI_PotentialTarget is the UI used to mark all potential targets. By default this is set to Content/LockOn360/Blueprints/UI/UI_ActiveTarget . When the lock-on is activated, all potential targets that is currently visible on the screen will be marked using a white circle/halo indicator. This halo is placed on all potential targets, including the currently active target. Just like the crosshair, you can set this value to your own custom user widget. Setting this value to None will remove the UI from all of the potential targets, including the currently active target.","title":"Customizing the Potential Target Indicator (Circle Indicator)"},{"location":"ui_customization/#customizing-the-potential-target-lines","text":"When a target is found, white lines will be shown coming from the currently active target, pointing towards all the other potential targets that is currently visible on screen. The white line is there to help you figure out which target is available for switching, and which direction you'll need to flick to in order to select them. You can turn these lines on/off by changing the value of IsDrawPotentialLine . To change the line color and transparency, set the PotentialLineColor value according to your preference.","title":"Customizing the Potential Target Lines"},{"location":"ui_customization/#customizing-the-flick-indicator-line","text":"By default, a momentary line visualizing the direction of your flick gesture will be shown when you move either your mouse or gamepad thumbstick. This is mostly used for debug purposes, as an indicator to check where your flick is directed to. This line can be disabled during normal gameplay. You can turn this line on/off by changing the value of IsDrawFlickLine . To change the line color and transparency, set the FlickLineColor value according to your preference.","title":"Customizing the Flick Indicator Line"},{"location":"versionhistory/","text":"Lock-On 360 - Version History Ver 1.1.0 Added support for camera offset 3 example camera point of view is included in the LockOnCharacter example blueprint Added Camera Proximity Limit system This is used to assign a distance limit on how close the camera can be to the target UI updates, several UI variants added Added UI info text, active LockOnTarget component can have its information shown on the crosshair Improved out of range deactivation system Code refactoring Ver 1.0.2 Added out of range deactivation feature Added out of range UI Ver 1.0.1 Added ConfirmLockOnActive function Used to check whether the lock-on is currently active or not. Added LockOnUpdaterFramerate property to LockOnManager Used to control the update frequency of the lock-on system, default value set to 120 FPS. Lower framerates might lead to unwanted shakes and jittery to the camera movement. Removed OnDefaultCameraYaw and OnDefaultCameraPitch Redundant events. Role already fulfilled by OnGamepadCameraYaw, OnGamepadCameraPitch, OnMouseCameraYaw, OnMouseCameraPitch. Added UI settings: FlickLineColor and PotentialLineColor FlickLineColor is the color of the line that indicates the direction of the flick, appears only momentarily. PotentialLineColor is the color of the lines that indicates all possible targets on the screen. Both settings can be changed from the Details tab of the LockOnManager component. Added some properties to access the lock-on targets. CurrentTarget returns the currently active target. PotentialTargetList returns all of the possible lock-on target that is visible on the screen. IsTrackPotentialTargetList is the flag used to ensure that PotentialTargetList is updated every cycle. Ver 1.0.0 Lock-On 360 initial release","title":"Version History"},{"location":"versionhistory/#lock-on-360-version-history","text":"","title":"Lock-On 360 - Version History"},{"location":"versionhistory/#ver-110","text":"Added support for camera offset 3 example camera point of view is included in the LockOnCharacter example blueprint Added Camera Proximity Limit system This is used to assign a distance limit on how close the camera can be to the target UI updates, several UI variants added Added UI info text, active LockOnTarget component can have its information shown on the crosshair Improved out of range deactivation system Code refactoring","title":"Ver 1.1.0"},{"location":"versionhistory/#ver-102","text":"Added out of range deactivation feature Added out of range UI","title":"Ver 1.0.2"},{"location":"versionhistory/#ver-101","text":"Added ConfirmLockOnActive function Used to check whether the lock-on is currently active or not. Added LockOnUpdaterFramerate property to LockOnManager Used to control the update frequency of the lock-on system, default value set to 120 FPS. Lower framerates might lead to unwanted shakes and jittery to the camera movement. Removed OnDefaultCameraYaw and OnDefaultCameraPitch Redundant events. Role already fulfilled by OnGamepadCameraYaw, OnGamepadCameraPitch, OnMouseCameraYaw, OnMouseCameraPitch. Added UI settings: FlickLineColor and PotentialLineColor FlickLineColor is the color of the line that indicates the direction of the flick, appears only momentarily. PotentialLineColor is the color of the lines that indicates all possible targets on the screen. Both settings can be changed from the Details tab of the LockOnManager component. Added some properties to access the lock-on targets. CurrentTarget returns the currently active target. PotentialTargetList returns all of the possible lock-on target that is visible on the screen. IsTrackPotentialTargetList is the flag used to ensure that PotentialTargetList is updated every cycle.","title":"Ver 1.0.1"},{"location":"versionhistory/#ver-100","text":"Lock-On 360 initial release","title":"Ver 1.0.0"}]}